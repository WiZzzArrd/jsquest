import PixelButton from './PixelButton';

interface SuccessModalProps {
  isOpen: boolean;
  onClose: () => void;
  onNext: () => void;
  levelName: string;
  isLastLevel?: boolean;
}

export default function SuccessModal({ 
  isOpen, 
  onClose, 
  onNext, 
  levelName, 
  isLastLevel = false 
}: SuccessModalProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="pixel-border bg-undertale-panel p-8 max-w-md text-center animate-level-unlock">
        <div className="text-4xl mb-4">üéâ</div>
        <h3 className="text-2xl mb-4 text-undertale-yellow">
          * –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω! *
        </h3>
        <p className="mb-6">
          –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ö—Ä–∞–±—Ä—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç! –í—ã –æ—Å–≤–æ–∏–ª–∏ {levelName}.
        </p>
        <div className="mb-6">
          <div className="text-undertale-green">–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: +100</div>
          <div className="text-undertale-cyan">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ú–∞—Å—Ç–µ—Ä "{levelName}"</div>
        </div>
        <div className="flex gap-4 justify-center">
          {!isLastLevel ? (
            <PixelButton onClick={onNext} variant="success">
              –ü–†–û–î–û–õ–ñ–ò–¢–¨ –ü–†–ò–ö–õ–Æ–ß–ï–ù–ò–ï
            </PixelButton>
          ) : (
            <PixelButton onClick={onClose} variant="warning">
              –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!
            </PixelButton>
          )}
          <PixelButton onClick={onClose} variant="secondary">
            –ù–ê–ó–ê–î –ö –£–†–û–í–ù–Ø–ú
          </PixelButton>
        </div>
      </div>
    </div>
  );
}
